
      <script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>

<script type="text/javascript">
  

      var selectedDate='';
      var tdate='';
      var chartdata;
      var selectedGenerator;
      var selectedPattern;
   $( function() {
    $( "#calender1" ).datepicker({dateFormat : "dd-mm-yy"});
    $( "#calender2" ).datepicker({dateFormat : "dd-mm-yy"});
   // $( "#calender2" ).datepicker({dateFormat : "dd-mm-yy"});

        var today = new Date();
var dd = today.getDate();
var mm = today.getMonth()+1; //January is 0!

var yyyy = today.getFullYear();
if(dd<10){
    dd='0'+dd;
} 
if(mm<10){
    mm='0'+mm;
} 
var today = dd+'-'+mm+'-'+yyyy;
document.getElementById("calender1").value = today;
document.getElementById("calender2").value = today;
$.post('/gen/getAllGens',function(res){
var gens=JSON.parse(res);
console.log(gens);
  htm='';
htm+='<option value="ALL">ALL</option>';
htm+='<option value="AR">NER</option>';
htm+='<option value="SR">SR</option>';
htm+='<option value="WR">WR</option>';
htm+='<option value="ER">ER</option>';
htm+='<option value="NR">NR</option>';


for(var i=0;i<gens.length;i++){
htm+='<option value="'+gens[i]['id']+'">'+gens[i]['name']+'</option>';}


document.getElementById('dropdowngen').innerHTML=htm;
});

  htm2='';
htm2+='<option value="SMP">SMP</option>';
htm2+='<option value="MCP">MCP</option>';
htm2+='<option value="UMCP">UMCP</option>';
htm2+='<option value="AVG">AVERAGE PRICE(P/U)</option>';
htm2+='<option value="OS">OPTIMAL SCH AND SCH</option>';
htm2+='<option value="SAVING">REDUCTION IN COST</option>';
htm2+='<option value="COST">COST</option>';
htm2+='<option value="RESERVE1">RAMPING RESERVES</option>';
htm2+='<option value="RESERVE2">SPINNING RESERVES</option>';
htm2+='<option value="AV">INFEASIBILITY</option>';
htm2+='<option value="POC">LOSS</option>';
htm2+='<option value="PERTURBATIONS">PERTURBATIONS</option>';
htm2+='<option value="PUNCHED">PUNCHED RRAS/APPLIED</option>';



document.getElementById('dropdownpattern').innerHTML=htm2;
});


function showPattern(){
  selectedDate=document.getElementById("calender1").value;
  tdate=document.getElementById("calender2").value;
 var selectedGen=$("#dropdowngen").val();
 var selectedPat=$('#dropdownpattern').val();


  var from=$( "#calender1" ).datepicker('getDate');
  var dates=[];
  var i=1;
  dates.push(selectedDate);
  if(selectedDate!=tdate)
{  

  do{   

  var x=from;
   x.setDate(x.getDate()+i);
   var dd = x.getDate();
var mm = x.getMonth()+1; //January is 0!

var yyyy = x.getFullYear();
if(dd<10){
    dd='0'+dd;
} 
if(mm<10){
    mm='0'+mm;
}
var x = dd+'-'+mm+'-'+yyyy;
dates.push(x);
}while(x!=tdate);

}



document.getElementById('chart_cumm').innerHTML='';
document.getElementById('chart_avg').innerHTML='';
document.getElementById('chart_div').innerHTML='';
document.getElementById('chart_div1').innerHTML='';
document.getElementById('chart_div2').innerHTML='';
document.getElementById('chart_div3').innerHTML='';





 if(selectedPat=="SMP"){





  $.post('/marginalcost/getTodayCost',{selectedDate:dates},function(res){
   var div=0;
var chartdata=JSON.parse(res);

var ner=[];
var nr=[];
var sr=[];
var ai=[];
var xaxis=[];

var days=dates.length;

for(var block=1;block<97;block++){
xaxis.push(block);

var arsum=0;
var nrsum=0;
var srsum=0;
var aisum=0;

for(var d=0;d<days;d++){
  arsum+=parseInt(chartdata[d*96+block][1]);
  nrsum+=parseInt(chartdata[d*96+block][2]);
   srsum+=parseInt(chartdata[d*96+block][3]);
    aisum+=parseInt(chartdata[d*96+block][4]);
 

}


ner.push(parseInt(arsum/days));
nr.push(parseInt(nrsum/days));
sr.push(parseInt(srsum/days));
ai.push(parseInt(aisum/days));


}


// for(var i=1;i<chartdata.length;i++){
//      xaxis.push(chartdata[i][0]);
//      ner.push(chartdata[i][1]);
//      nr.push(chartdata[i][2]);
//      sr.push(chartdata[i][3]);
//      ai.push(chartdata[i][4]);

//      div++;

// }


Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Pattern for System Marginal Price From  Date '+selectedDate+' to Date '+tdate + ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxis,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    credits: {
        enabled: false
    },
    series: [{
        name: 'NER',
        data: ner,
        color:' #ADD8E6'
    }, {
        name: 'NR',
        data: nr,
        color:'#FA8072'
    }, {
        name: 'SR',
        data: sr,
        color:'#FFF700'
    }, {
        name: 'AI',
        data: ai,
        color:'#008000'
    }]
});


      });





 }else if(selectedPat=="PUNCHED"){




  $.post('/rras/punched',{selectedDate:dates,selectedGen:selectedGen},function(res){
   var div=0;
var chartdata=JSON.parse(res);

var xaxis=[];
let punched=[]
let rrasup=[]
let rrasdn=[]

for(let i=0;i<chartdata["punch"].length;i++){
xaxis.push(i+1)
punched.push(chartdata["punch"][i])
}

for(let i=0;i<chartdata["rrasup"].length;i++){

rrasup.push(chartdata["rrasup"][i])
}


for(let i=0;i<chartdata["rrasdn"].length;i++){

rrasdn.push(chartdata["rrasdn"][i])
}


Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Pattern for RRAS PUNCHED/APPLIED From  Date '+selectedDate+' to Date '+tdate + ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxis,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    credits: {
        enabled: false
    },
    series: [{
        name: 'RRAS PUNCHED',
        data: punched,
        color:' #ADD8E6'
    },
    {
        name: 'RRAS UP',
        data: rrasup,
        color:'#FA8072'
    }
    ,{
        name: 'RRAS DN',
        data: rrasdn,
        color:'#FA8000'
    }]
});


      });





 }
 else if(selectedPat=="COST"){



$.post('/gamsdata/getTodaySaving',{selectedDate:dates,selectedGen:selectedGen,flag:2},function(res){
   
var chartdata=JSON.parse(res);
selectedGenerator=idtoname[selectedGen];

//console.log(chartdata);

if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}


var block=[];
var ocost=[];
var pcost=[];



var days=dates.length;

for(var b=1;b<97;b++){
block.push(b);
var ocostSum=0;
var pcostSum=0;

for(var d=0;d<days;d++){
ocostSum+=parseInt(chartdata[d*96+b][1]);
pcostSum+=parseInt(chartdata[d*96+b][2]);

}


ocost.push(parseInt(ocostSum/days));
pcost.push(parseInt(pcostSum/days));

}






Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Pattern for  Optimal Cost and Present Cost for ' +selectedGenerator+' From Date '+selectedDate+' to Date '+tdate + ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: block,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [ {
        name: 'Present Cost',
        data: pcost,
        color:' #ADD8E6'
    },{
        name: 'Optimal Cost',
        data: ocost,
        color:'#FA8072'
    }]
});





 // google.charts.load('current', {'packages':['corechart']});
 //      google.charts.setOnLoadCallback(drawChart);
       // document.getElementById('chart_cumm').innerHTML="<h3>Cummulative Net  :"+cumm.toString()+" (in Lakhs) </h3>";
   
      });



 }else if(selectedPat=="SAVING"){




  $.post('/gamsdata/getTodaySaving',{selectedDate:dates,selectedGen:selectedGen,flag:0},function(res){
   
var chartdata=JSON.parse(res);
selectedGenerator=idtoname[selectedGen];

if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}


var xaxis=[];
var savingsData=[];
var cumm=0;

var days=dates.length;
for(var block=1;block<97;block++ ){
xaxis.push(block);
var savingSum=0;

for(var d=0;d<days;d++){
savingSum+=parseInt(chartdata[d*96+block][1]);

}

savingsData.push(parseInt(savingSum/days));
cumm+=parseInt(savingSum/days);

}


cumm=Math.round((cumm/4)*100)/100;


Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Pattern Reduction in Generation cost for ' +selectedGenerator+' from  Date '+selectedDate+' to Date '+tdate + ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxis,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [{
        name: 'Reduction in cost',
        data: savingsData,
        color:' #ADD8E6'
    }]
});


document.getElementById('chart_cumm').innerHTML="<h3>Cumulative Net  :"+cumm.toString()+" (in Lakhs) </h3>";
//document.getElementById('chart_avg').innerHTML="<h3>Average  :"+(cumm/days).toFixed(2)+" (in Lakhs) </h3>";

});




 }else if(selectedPat=="RESERVE1"){




$.post('/gamsdata/getTodayDataDate',{selectedDate:dates,selectedGen:selectedGen},function(res){
  var chartdata=JSON.parse(res);

//   $.post('/genrates/getRampDatesData',{sdate:dates},function(res){

// var rampData=JSON.parse(res);

selectedGenerator=idtoname[selectedGen];
if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}
console.log(chartdata);
var xaxisData=[];

var upReserve=[];
var downReserve=[];
var thddata=[];

var days=dates.length;

for(var block=1;block<97;block++){
xaxisData.push(block);

var upreserveSum=0;
var downreserveSum=0;

for(var d=0;d<days;d++){

upreserveSum+=parseInt(chartdata[d*96+block][5]);

downreserveSum+=parseInt(chartdata[d*96+block][6]);

thddata.push([dates[d],block,parseInt(chartdata[d*96+block][5])]);


}

upReserve.push(parseInt(upreserveSum/days));
downReserve.push(-1*parseInt(downreserveSum/days));

}


Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        }, yAxis: {
       
        title: {

            text: 'MW'
        }
    },
    title: {
        text:' Pattern for Ramping Reserves from  Date '+selectedDate+' to Date '+tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxisData,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [  {
        name: 'DOWN Reserve',
        data:downReserve,
        color:' #ADD8E6'
    },{
        name: 'UP Reserve',
        data: upReserve,
        color:' rgba(230,230,0, .1)'
    }]
});
  });

 }else if(selectedPat=="RESERVE2"){




$.post('/gamsdata/getTodayDataDate',{selectedDate:dates,selectedGen:selectedGen},function(res){
  var chartdata=JSON.parse(res);

//   $.post('/genrates/getRampDatesData',{sdate:dates},function(res){

// var rampData=JSON.parse(res);

selectedGenerator=idtoname[selectedGen];
if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}
console.log(chartdata);
var xaxisData=[];

var upReserve=[];
var downReserve=[];


var days=dates.length;

for(var block=1;block<97;block++){
xaxisData.push(block);

var upreserveSum=0;
var downreserveSum=0;

for(var d=0;d<days;d++){

upreserveSum+=parseInt(chartdata[d*96+block][3])-parseInt(chartdata[d*96+block][2]);

downreserveSum+=parseInt(chartdata[d*96+block][2])-parseInt(chartdata[d*96+block][4]);

}

upReserve.push(parseInt(upreserveSum/days));
downReserve.push(-1*parseInt(downreserveSum/days));

}


Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        }, yAxis: {
       
        title: {

            text: 'MW'
        }
    },
    title: {
        text:' Pattern for Spinning Reserves from  Date '+selectedDate+' to Date '+tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxisData,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [  {
        name: 'DOWN Reserve',
        data:downReserve,
        color:' #ADD8E6'
    },{
        name: 'UP Reserve',
        data: upReserve,
        color:' rgba(230,230,0, .1)'
    }]
});



  });




 }
 else if(selectedPat=="OS"){



$.post('/gamsdata/getTodayDataDate',{selectedDate:dates,selectedGen:selectedGen},function(res){
   
var chartdata=JSON.parse(res);
selectedGenerator=idtoname[selectedGen];
if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}
console.log(chartdata);
var xaxisData=[];
var sch=[];
var opt=[];
var pmin=[];
var pmax=[];

var days=dates.length;


for(var block=1;block<97;block++){
xaxisData.push(block);
var schSum=0;
var optSum=0;
var pmaxSum=0;
for(var d=0;d<days;d++){
schSum+=parseInt(chartdata[d*96+block][1]);
optSum+=parseInt(chartdata[d*96+block][2]);
pmaxSum+=parseInt(chartdata[d*96+block][3]);
}

sch.push(parseInt(schSum/days));
opt.push(parseInt(optSum/days));
pmax.push(parseInt(pmaxSum/days));
}





Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Pattern Schedule and Optimal Schedule for ' +selectedGenerator+' From Date '+selectedDate + ' to Date '+tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxisData,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [ {
        name: 'Schedule',
        data: sch,
        color:' #ADD8E6'
    }, {
        name: 'Optimal Schedule',
        data: opt,
        color:'#FA8072'
    }
    ,{
        name: 'DC',
        data: pmax,
        color:'#FA8000'
    } ]
});



      });







 } 


 else if(selectedPat=="AV")
 {


 $.post('/gamsbuffer/getBufferTrend',{selectedDate:dates,selectedGen:selectedGen},function(res){
   selectedGenerator=idtoname[selectedGen];
   if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}
chartdata=JSON.parse(res);
console.log(chartdata);
var sch=[];
var rup=[];
var rdn=[];
var xaxis=[];
var nrir=[];
var srir=[];
var nerir=[];

for(var i=0;i<96;i++)
{
sch.push(0);
rup.push(0); 
rdn.push(0);
nrir.push(0);
srir.push(0);
nerir.push(0);
}

for(var i=1;i<chartdata.length;i++){

xaxis.push(chartdata[i][0]);
sch[(i-1)%96]+=(chartdata[i][1]);
rup[(i-1)%96]+=(chartdata[i][2]); 
rdn[(i-1)%96]+=(chartdata[i][3]);
nrir[(i-1)%96]+=(chartdata[i][4]);
srir[(i-1)%96]+=(chartdata[i][5]);
nerir[(i-1)%96]+=(chartdata[i][6]);
}

for(var i=0;i<96;i++)
{
sch[i]/=((chartdata.length-1)/96);
rup[i]/=((chartdata.length-1)/96);
rdn[i]/=((chartdata.length-1)/96);
nrir[i]/=((chartdata.length-1)/96);
srir[i]/=((chartdata.length-1)/96);
nerir[i]/=((chartdata.length-1)/96);
}



Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'INFEASIBILITY  for ' +selectedGenerator+' From Date '+selectedDate + ' to Date '+tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxis,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [  {
        name: 'Schedule',
        data: sch,
        color:' rgba(230,230,0, .1)'
    },{
        name: 'Ramp Up',
        data: rup,
        color:' #ADD8E6'
    }, {
        name: 'Ramp Down',
        data: rdn,
        color:'#FA8072'
    }]
});



Highcharts.chart('chart_div1', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Inter Regional Buffer  for ' +selectedGenerator+' From Date '+selectedDate + ' to Date '+tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxis,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [  {
        name: 'NR IR',
        data: nrir,
        color:' rgba(230,230,0, .1)'
    },{
        name: 'SR IR',
        data: srir,
        color:' #ADD8E6'
    }, {
        name: 'NER IR',
        data: nerir,
        color:'#FA8072'
    }]
});



});





 }

 else if(selectedPat=="POC")
 {

  $.post('/gamsdata/getTodayDataDateLoss',{selectedDate:dates,selectedGen:selectedGen},function(res){
   selectedGenerator=idtoname[selectedGen];
   if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}


chartdata=JSON.parse(res);
console.log(chartdata);

var xaxis=[];
var yaxis=[];



for(var i=1;i<chartdata.length;i++){

yaxis.push(parseInt((chartdata[i][2]-chartdata[i][1])));
}

console.log(yaxis);

var loss=[];

for(let indx=0;indx<96;indx++)
{
  xaxis.push((indx + 1).toString());
  loss.push(0);
}

for(let indx=0;indx<yaxis.length;indx++)
{
  loss[indx%96]+=yaxis[indx];
}

//console.log(loss);

for(let indx=0;indx<96;indx++)
{
  loss[indx] = Number((loss[indx]/(yaxis.length / 96)).toFixed(2));
}


console.log(loss);
Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Loss  for ' +selectedGenerator+' From Date '+selectedDate + ' to Date '+tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxis,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [  {
        name: 'Loss',
        data: loss,
        color:' rgba(230,230,0, .1)'
    }]
});

 });


}

else if(selectedPat=="MCP")
{
     $.post('/gamspwc/getMCPByDates',{dates:dates},function(res){
        var mcparr=res['mcparr'];


        var finalD=[];
        var xaxisdata=[];
        for(var i=0;i<96;i++)
        {
          xaxisdata.push(i+1);
          finalD.push(0);
        }

        for(var i=0;i<mcparr.length;i++)
        {
          finalD[i%96] += mcparr[i];
        }


        for(var i=0;i<96;i++)
        {
          finalD[i]=Number((finalD[i]/(dates.length)).toFixed(2));
        }



        Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'MCP Diurnal for period'+ selectedDate + " to " + tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxisdata,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    yAxis:{
      title:'Paisa'
    },
    credits: {
        enabled: false
    },
    series: [{
        name: 'MCP',
        data: finalD,
        color:' #ADD8E6'
    }]
});





      });
}


else if(selectedPat == 'UMCP')
{
      $.post('/iexmcp/getIEXMCPData',{dates:dates},function(res){
        
        console.log(res);
        var umcparr=res;
        var xaxisdata=[];
        var finalD=[];
        for(var i=0;i<dates.length;i++)
        {
          for(var j=0;j<96;j++)
          {
            //xaxisdata.push(dates[i] + ' : ' + parseInt(j+1));
            umcparr[i*96 + j] = (parseInt(umcparr[i*96 + j])/10); 
            //finalD.push(0);
          }
        }

        for(var i=0;i<96;i++)
        {
          xaxisdata.push(i+1);
          finalD.push(0);
        }

        for(var i=0;i<umcparr.length;i++)
        {
          finalD[i%96] += umcparr[i];
        }


        for(var i=0;i<96;i++)
        {
          finalD[i]=Number((finalD[i]/(dates.length)).toFixed(2));
        }



        Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'MCP Diurnal for period'+ selectedDate + " to " + tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxisdata,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    yAxis:{
      title:'Paisa'
    },
    credits: {
        enabled: false
    },
    series: [{
        name: 'UMCP',
        data: finalD,
        color:' #ADD8E6'
    }]
});










});


}

else if(selectedPat == 'AVG')
{
  $.post('/gamspwc/getAveragePrice',{date:dates,region:'0'},function(res){
   
chartdata=JSON.parse(res);


console.log(chartdata);
var xaxisData=[];
var sch=[];
var preAVG=[];
var postAVG=[];
var diifAVG=[];
var presum=0;
var postsum=0;

var diurAvg=[];

for(let i=0;i<96;i++)
{
  diurAvg.push(0);
  xaxisData.push(i+1);
}


console.log(diurAvg);

for(var i=0;i<chartdata.length;i++){
  let temp= parseInt(chartdata[i][5]*10000/chartdata[i][3]); // Diurnal of post average
  if(isNaN(temp) && i>95)
  {
    console.log('temp is NAN');
    temp=diurAvg[i%96]/(parseInt(i/96));
  }

  else if(isNaN(temp) && i<=95)
  {
    console.log('temp is NAN');
    temp=0;
  }

  //console.log('temp is: ', temp);

  diurAvg[i%96] += temp;
}

console.log(diurAvg);

for(let i=0;i<96;i++)
{
  if(isNaN(diurAvg[i]))
    console.log('diurAvg is NaN');

  diurAvg[i] = Number((diurAvg[i]/dates.length).toFixed(2));
}




console.log(diurAvg);


        Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Average Price(P/u) Diurnal graph for period'+ selectedDate + " to " + tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxisData,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    yAxis:{
      title:'Paisa'
    },
    credits: {
        enabled: false
    },
    series: [{
        name: 'AVERAGE PRICE (P/U',
        data: diurAvg,
        color:' #ADD8E6'
    }]
});












});

}

 else if(selectedPat == 'PERTURBATIONS')
{
  $.post('/gamspwc/getChanges',{date:dates},function(res){
   
chartdata=JSON.parse(res);


console.log(chartdata);
var xaxisData=[];
var sch=[];
var opt=[];
var pmin=[];
var pmax=[];

for(var i=0;i<chartdata.length;i++){
  xaxisData.push((i%96) +1);

  sch.push(parseInt(chartdata[i][1]));

   opt.push(parseInt(chartdata[i][2]));

    pmax.push(parseInt(chartdata[i][3]));

     pmin.push(parseInt(chartdata[i][4]));
}


schdiurnal=[];
optdiurnal=[];
pmaxdiurnal=[];
pmindiurnal=[];
schoptdiurnal=[];
pmaxpmindiurnal=[];

for(var i=0;i<96;i++)
{
  schdiurnal.push(0);
  optdiurnal.push(0);
  pmaxdiurnal.push(0);
  pmindiurnal.push(0);
  schoptdiurnal.push(0);
  pmaxpmindiurnal.push(0);
}

for(var i=0;i<sch.length;i++)
{
  schdiurnal[i%96] += sch[i];
  optdiurnal[i%96] += opt[i];
  pmindiurnal[i%96] += pmin[i];
  pmaxdiurnal[i%96] += pmax[i];

  schoptdiurnal[i%96] += (sch[i] + opt[i]);
  pmaxpmindiurnal[i%96] += (pmax[i] - pmin[i]);
}

for(var i=0;i<96;i++)
{
  schdiurnal[i] = parseInt(schdiurnal[i]/dates.length);
  optdiurnal[i] = parseInt(optdiurnal[i]/dates.length);
  pmindiurnal[i] = parseInt(pmindiurnal[i]/dates.length);
  pmaxdiurnal[i] = parseInt(pmaxdiurnal[i]/dates.length);
  schoptdiurnal[i] = parseInt(schoptdiurnal[i]/dates.length);
  pmaxpmindiurnal[i] = parseInt(pmaxpmindiurnal[i]/dates.length);
  

}

Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'No of Generators Changed Post SCED for period'+ selectedDate + " to " + tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxisData,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    credits: {
        enabled: false
    },
    series: [{
        name: 'SCED UP COUNT',
        data: schdiurnal,
        color:' #ADD8E6'
    }, {
        name: 'SCED DOWN COUNT',
        data: optdiurnal,
        color:'#FA8072'
    }]
});











Highcharts.chart('chart_div2', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:' Total number of Generators Changed Post SCED for period'+ selectedDate + " to " + tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxisData,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    credits: {
        enabled: false
    },
    series: [{
        name: 'SCED UP + SCED DOWN COUNT',
        data: schoptdiurnal,
        color:' #ADD8E6'
    }]
});









Highcharts.chart('chart_div3', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:' Total MW change Post SCED for period'+ selectedDate + " to " + tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxisData,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    credits: {
        enabled: false
    },
    series: [{
        name: 'SCED UP + SCED DOWN (in MW)',
        data: pmaxpmindiurnal,
        color:' #ADD8E6'
    }]
});















Highcharts.chart('chart_div1', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'MW change in each Block Post SCED for period'+ selectedDate + " to " + tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        categories: xaxisData,
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    credits: {
        enabled: false
    },
    series: [ {
        name: 'SCED UP',
        data: pmaxdiurnal,
        color:'#FFF700'
    }, {
        name: 'SCED DOWN',
        data: pmindiurnal,
        color:'#008000'
    }]
});



 // google.charts.load('current', {'packages':['corechart']});
 //      google.charts.setOnLoadCallback(drawChart);

      //document.getElementById('chart_cumm').innerHTML="<h3>Cummulative of the above trend is :"+cumm.toString()+" MW </h3>";
      });

}




}



</script>
<div class="row"><span class="alert alert-danger col-lg-12"><h5><center>Kindly Select Date Range Excluding Today Date</center></h5></span></div>
<div class="row">

               <div class="col-lg-2">
    <label for="calender1">FROM DATE</label>
     <input type="text" class="form-control"   id="calender1">
</div>

               <div class="col-lg-2">
    <label for="calender2">TO DATE</label>
     <input type="text" class="form-control"   id="calender2">
</div>
        <div class="col-lg-3">
          <label>PATTERN TO PLOT</label>
          <select id="dropdownpattern" class="form-control">
</select>
      </div>

      <div class="col-lg-3">
          <label>GENERATORS</label>
          <select id="dropdowngen" class="form-control">
</select>
      </div>

<div class="col-lg-2">
  <label>submit</label>
  <button class="btn btn-outline-primary form-control" onclick="showPattern()" >submit</button>
</div>
</div>
<div id="chart_div" style="width: 100%; height: 500px;"></div>

<div class="row">
<div id="chart_cumm" class="col-lg-4 offset-lg-2"></div>
<div id="chart_avg" class="col-lg-4"></div>
</div>

<div id="chart_div1" style="width: 100%; height: 500px;"></div>

<div id="chart_div2" style="width: 100%; height: 500px;"></div>

<div id="chart_div3" style="width: 100%; height: 500px;"></div>