
      <script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>

<script type="text/javascript">
  

      var selectedDate='';
      var tdate='';
      var chartdata;
      var selectedGenerator;
      var selectedPattern;
      var remaining=0;
   $( function() {
    $( "#calender1" ).datepicker({dateFormat : "dd-mm-yy"});
    $( "#calender2" ).datepicker({dateFormat : "dd-mm-yy"});
   // $( "#calender2" ).datepicker({dateFormat : "dd-mm-yy"});

        var today = new Date();
var dd = today.getDate();
var mm = today.getMonth()+1; //January is 0!

var yyyy = today.getFullYear();
if(dd<10){
    dd='0'+dd;
} 
if(mm<10){
    mm='0'+mm;
} 
var today = dd+'-'+mm+'-'+yyyy;
document.getElementById("calender1").value = today;
document.getElementById("calender2").value = today;
$.post('/gen/getAllGens',function(res){
var gens=JSON.parse(res);
console.log(gens);
  htm='';
htm+='<option value="ALL">ALL</option>';
htm+='<option value="ALLAGC">AGC</option>';
htm+='<option value="AR">NER</option>';
htm+='<option value="SR">SR</option>';
htm+='<option value="WR">WR</option>';
htm+='<option value="ER">ER</option>';
htm+='<option value="NR">NR</option>';


for(var i=0;i<gens.length;i++){
htm+='<option value="'+gens[i]['id']+'">'+gens[i]['name']+'</option>';}


document.getElementById('dropdowngen').innerHTML=htm;


htm2='';
htm2+='<option value="SMP">SMP</option>';
htm2+='<option value="MCP">MCP</option>';
htm2+='<option value="UMCP">UMCP</option>';
htm2+='<option value="AVG">AVERAGE PRICE(P/U)</option>';
htm2+='<option value="OS">OPTIMAL SCH AND SCH</option>';
htm2+='<option value="SAVING">REDUCTION IN COST</option>';
htm2+='<option value="COST">COST</option>';
htm2+='<option value="RESERVE1">RAMPING RESERVES</option>';
htm2+='<option value="RESERVE2">SPINNING RESERVES</option>';
htm2+='<option value="ACTUAL">ACTUAL METER READING</option>';
htm2+='<option value="pocloss">LOSS</option>';
htm2+='<option value="PERTURBATIONS">PERTURBATIONS</option>';
// htm2+='<option value="RAMPUPDUAL">RAMP UP DUAL</option>';

htm2+='<option value="PMINDUAL">DUAL OF PMIN</option>';
htm2+='<option value="PMAXDUAL">DUAL OF PMAX</option>';
htm2+='<option value="RAMPUPDUAL">DUAL OF RAMPUP</option>';
htm2+='<option value="RAMPDNDUAL">DUAL OF RAMPDN</option>';
//htm2+='<option value="RESERVE2">SPINNING--- RESERVES</option>';

//console.log(htm2):
document.getElementById('dropdownpattern').innerHTML=htm2;




});

 
});


// function bsearch(arr,low,high ,val){

// var mid = parseInt((low+high)/2);

// if(low < high){

// if(arr[mid]< val){
//   bsearch(arr,mid,high,val);
// }else{
// remaining=mid;
// bsearch(arr,low,mid,val);

// }
// }
// else{
//   console.log("in return");
//   return;
// }

// }




function showPattern(){
  selectedDate=document.getElementById("calender1").value;
  tdate=document.getElementById("calender2").value;
 var selectedGen=$("#dropdowngen").val();
 var selectedPat=$('#dropdownpattern').val();


  var from=$( "#calender1" ).datepicker('getDate');
  var dates=[];
  var i=1;
  dates.push(selectedDate);
  if(selectedDate!=tdate)
{  

  do{   

  var x=from;
   x.setDate(x.getDate()+i);
   var dd = x.getDate();
var mm = x.getMonth()+1; //January is 0!

var yyyy = x.getFullYear();
if(dd<10){
    dd='0'+dd;
} 
if(mm<10){
    mm='0'+mm;
}
var x = dd+'-'+mm+'-'+yyyy;
dates.push(x);
}while(x!=tdate);

}



document.getElementById('chart_div').innerHTML='';
document.getElementById('chart_cumm').innerHTML='';
document.getElementById('chart_div1').innerHTML='';
document.getElementById('chart_div2').innerHTML='';
document.getElementById('chart_div3').innerHTML='';



//console.log('selectedPat is: ', selectedPat);


 if(selectedPat=="SMP"){





$.post('/marginalcost/getTodayCost',{selectedDate:dates},function(res){
var div=0;
var chartdata=JSON.parse(res);
console.log("Chart data");
console.log(chartdata);
var ner=[];
var nr=[];
var sr=[];
var ai=[];
var xaxis=[];

var days=dates.length;

var arpat=[];
 var nrpat=[];
 var srpat=[];
 var allpat=[];

for(var i=1;i<chartdata.length;i++){
arpat.push(chartdata[i][1]);
nrpat.push(chartdata[i][2]);
srpat.push(chartdata[i][3]);
allpat.push(chartdata[i][4]);
}



var nrmax=Math.max(nrpat);
var nrmin=Math.min(nrpat);
var nrinterval=parseInt((nrmax-nrmin)/chartdata.length-1);



var armax=Math.max(arpat);
var armin=Math.min(arpat);
var arinterval=parseInt((armax-armin)/chartdata.length-1);



var srmax=Math.max(srpat);
var srmin=Math.min(srpat);
var srinterval=parseInt((srmax-srmin)/chartdata.length-1);


var allmax=Math.max(...allpat);
console.log(allmax);
var allmin=Math.min(...allpat);
var allinterval=parseInt((allmax-allmin)/chartdata.length-1);

console.log("allpat printing");
console.log(allpat);

 var allarr=[];
// var start=0;
// start=allmin;
// allarr.push(start);



// while(start<allmax){
//   start+=allinterval;
// allarr.push(start);
// }
//allpat = [...new Set(allpat)]; 

//var dummyAllpat=allpat;

allpat.sort(function(a,b){return a-b});


console.log("allpat printing");
console.log(allpat);


var countValues=[];
var countValues2=[];



for(var i=0;i<allpat.length;i++)
{

  if(allpat.indexOf(allpat[i]) == i)
  {
    countValues.push({ct:Number((((allpat.length-allpat.indexOf(allpat[i]))/allpat.length)*100).toFixed(2)),at:allpat[i]});
  }
  
}



for(var i=0;i<allpat.length;i++) //reducing 433 penalty imposed
{
  if(allpat[i]>409)
    allpat[i]-=433;
}

allpat.sort(function(a,b){return a-b});
  

for(var i=0;i<allpat.length;i++)
{

  if(allpat.indexOf(allpat[i]) == i)
  {
    countValues2.push({ct:Number((((allpat.length-allpat.indexOf(allpat[i]))/allpat.length)*100).toFixed(2)),at:allpat[i]});
  }
  
}





countValues.sort(function(a, b){return a.ct - b.ct});
countValues2.sort(function(a, b){return a.ct - b.ct});

var xaxis=[];
var yaxis=[];
var finaldata=[];
var finaldata2=[];



for(var k=0;k<countValues.length;k++){
xaxis.push(countValues[k]['ct']);
  yaxis.push(countValues[k]['at']);
  var temp=[];
  temp.push(countValues[k]['ct']);
  temp.push(countValues[k]['at']);
  finaldata.push(temp);
}




for(var k=0;k<countValues2.length;k++){
//xaxis.push(countValues[k]['ct']);
 // yaxis.push(countValues[k]['at']);
  var temp=[];
  temp.push(countValues2[k]['ct']);
  temp.push(countValues2[k]['at']);
  finaldata2.push(temp);
}


console.log(countValues);


console.log(finaldata);


Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Pattern for System Marginal Price From  Date '+selectedDate+' to Date '+tdate + ', timeblocks:'  +dates.length*96
    },
    xAxis: {
      title: {

            text: 'Percentage'
        },
        
    },
    
    series: [{
        name: 'ALL',
        data: finaldata,
        //color:' #ADD8E6'
    }]
}); 


Highcharts.chart('chart_div1', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Pattern for System Marginal Price From  Date '+selectedDate+' to Date '+tdate+ ' after reduction of 433 penalty for values greater than 409' + ', timeblocks:'  +dates.length*96
    },
    xAxis: {
      title: {

            text: 'Percentage'
        },
        
    },
    
    series: [{
        name: 'ALL',
        data: finaldata2,
        //color:' #ADD8E6'
    }]
}); 




      });





 }


  


else if(selectedPat=="MCP")
{
  console.log('in mcp');
  $.post('/gamspwc/getMCPByDates',{dates:dates},function(res){
        var mcparr=res['mcparr'];

        mcparr.sort(function(a,b){return a-b});



var countValues=[];




for(var i=0;i<mcparr.length;i++)
{

  if(mcparr.indexOf(mcparr[i]) == i)
  {
    countValues.push({ct:Number((((mcparr.length-mcparr.indexOf(mcparr[i]))/mcparr.length)*100).toFixed(2)),at:mcparr[i]});
  }
  
}

  


countValues.sort(function(a, b){return a.ct - b.ct});

var finaldata=[];

for(var k=0;k<countValues.length;k++){
  var temp=[];
  temp.push(countValues[k]['ct']);
  temp.push(countValues[k]['at']);
  finaldata.push(temp);
}





Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Pattern for MCP From  Date '+selectedDate+' to Date '+tdate + ', timeblocks:'  +dates.length*96
    },
    xAxis: {
      title: {

            text: 'Percentage'
        },
        
    },
    
    series: [{
        name: 'ALL',
        data: finaldata,
        //color:' #ADD8E6'
    }]
}); 










      });

}


else if(selectedPat=="UMCP")
{
  

    $.post('/iexmcp/getIEXMCPData',{dates:dates},function(res){
        
        
        var umcparr=res;
        
        for(var i=0;i<dates.length;i++)
        {
          for(var j=0;j<96;j++)
          {
            umcparr[i*96 + j] = (parseInt(umcparr[i*96 + j])/10); 
          }
        }

 
        umcparr.sort(function(a,b){return a-b});



var countValues=[];




for(var i=0;i<umcparr.length;i++)
{

  if(umcparr.indexOf(umcparr[i]) == i)
  {
    countValues.push({ct:Number((((umcparr.length-umcparr.indexOf(umcparr[i]))/umcparr.length)*100).toFixed(2)),at:umcparr[i]});
  }
  
}

  


countValues.sort(function(a, b){return a.ct - b.ct});

var finaldata=[];

for(var k=0;k<countValues.length;k++){
  var temp=[];
  temp.push(countValues[k]['ct']);
  temp.push(countValues[k]['at']);
  finaldata.push(temp);
}





Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Pattern for UMCP From  Date '+selectedDate+' to Date '+tdate + ', timeblocks:'  +dates.length*96
    },
    xAxis: {
      title: {

            text: 'Percentage'
        },
        
    },
    
    series: [{
        name: 'ALL',
        data: finaldata,
        //color:' #ADD8E6'
    }]
}); 










      });

}



else if(selectedPat=="AVG")
{
  console.log('in average price');

  $.post('/gamspwc/getAveragePrice',{date:dates,region:'0'},function(res){
   
chartdata=JSON.parse(res);


console.log(chartdata);
var postAVG=[];
for(var i=0;i<chartdata.length;i++){
  if(!isNaN(parseInt(chartdata[i][5]*10000/chartdata[i][3])))
  postAVG.push(parseInt(chartdata[i][5]*10000/chartdata[i][3]));
}

postAVG.sort(function(a,b){return a-b});

console.log('post average is: ');
console.log(postAVG);



var countValues=[];




for(var i=0;i<postAVG.length;i++)
{

  if(postAVG.indexOf(postAVG[i]) == i)
  {
    countValues.push({ct:Number((((postAVG.length-postAVG.indexOf(postAVG[i]))/postAVG.length)*100).toFixed(2)),at:postAVG[i]});
  }
  
}

  


countValues.sort(function(a, b){return a.ct - b.ct});
console.log('count values is:');
console.log(countValues)

var finaldata=[];

for(var k=0;k<countValues.length;k++){
  var temp=[];
  temp.push(countValues[k]['ct']);
  temp.push(countValues[k]['at']);
  finaldata.push(temp);
}





Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Pattern for Average Price(P/U) From  Date '+selectedDate+' to Date '+tdate + ', timeblocks:'  +dates.length*96
    },
    xAxis: {
      title: {

            text: 'Percentage'
        },
        
    },


    yAxis: {
      title: {

            text: 'Paisa/Unit'
        },
        
    },
    
    series: [{
        name: 'ALL',
        data: finaldata,
        //color:' #ADD8E6'
    }]
}); 





});

}


 else if(selectedPat=="COST"){



$.post('/gamsdata/getTodaySaving',{selectedDate:dates,selectedGen:selectedGen,flag:2},function(res){
   
var chartdata=JSON.parse(res);
selectedGenerator=idtoname[selectedGen];

//console.log(chartdata);
if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}


var ocost=[];
var pcost=[];


console.log(chartdata);

var days=dates.length;

for(var i=1;i<chartdata.length;i++)
{
  ocost.push(chartdata[i][1]);
  pcost.push(chartdata[i][2]);
}




ocost.sort(function(a,b){return a-b});
pcost.sort(function(a,b){return a-b});

console.log("ocost printing");
console.log(ocost);


var countValues=[];
var countValues2=[];


/*for(var i=0;i<dummyAllpat.length;i++){

 
  //bsearch(allarr,0,allarr.length-1,chartdata[i][4]);
for(var j=0;j<allpat.length;j++){

  if(allpat[j]>=dummyAllpat[i]){
    remaining=j;
    break;
  }
}
*/


for(var i=0;i<ocost.length;i++)
{

  if(ocost.indexOf(ocost[i]) == i)
  {
    countValues.push({ct:Number((((ocost.length-ocost.indexOf(ocost[i]))/ocost.length)*100).toFixed(2)),at:ocost[i]});
  }
  
}


for(var i=0;i<pcost.length;i++)
{

  if(pcost.indexOf(pcost[i]) == i)
  {
    countValues2.push({ct:Number((((pcost.length-pcost.indexOf(pcost[i]))/pcost.length)*100).toFixed(2)),at:pcost[i]});
  }
  
}

  


countValues.sort(function(a, b){return a.ct - b.ct});
countValues2.sort(function(a, b){return a.ct - b.ct});

var finaldata=[];
var finaldata2=[];

for(var k=0;k<countValues.length;k++){
  var temp=[];
  temp.push(countValues[k]['ct']);
  temp.push(countValues[k]['at']);
  finaldata.push(temp);
}


for(var k=0;k<countValues2.length;k++){
  var temp=[];
  temp.push(countValues2[k]['ct']);
  temp.push(countValues2[k]['at']);
  finaldata2.push(temp);
}
console.log('countValues');
console.log(countValues);
console.log('countValues2');
console.log(countValues2);










Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Pattern for  Optimal Cost and Present Cost for ' +selectedGenerator+' From Date '+selectedDate+' to Date '+tdate + ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        title: {

            text: 'Percentage'
        },
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [ {
        name: 'Optimal Cost',
        data: finaldata,
        color:'#FA8072'
    },

    {
      name:'Present Cost',
      data: finaldata2,
    }]
});








 // google.charts.load('current', {'packages':['corechart']});
 //      google.charts.setOnLoadCallback(drawChart);
       // document.getElementById('chart_cumm').innerHTML="<h3>Cummulative Net  :"+cumm.toString()+" (in Lakhs) </h3>";
   
      });



 }else if(selectedPat=="SAVING"){




  $.post('/gamsdata/getTodaySaving',{selectedDate:dates,selectedGen:selectedGen,flag:0},function(res){
   
var chartdata=JSON.parse(res);


console.log(chartdata);


selectedGenerator=idtoname[selectedGen];

if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}


var savingsData=[];
var countValues=[];

for(var i=1;i<chartdata.length;i++)
{
  if(chartdata[i][1] >= -75) // removing outliers value > 75
  savingsData.push(Math.abs(chartdata[i][1]));
}


  savingsData.sort(function(a,b){return a-b});

console.log("after sorting: ");
console.log(savingsData);

for(var i=0;i<savingsData.length;i++)
{

  if(savingsData.indexOf(savingsData[i]) == i)
  {
    countValues.push({ct:Number((((savingsData.length-savingsData.indexOf(savingsData[i]))/savingsData.length)*100).toFixed(2)),at:(-1*savingsData[i])});
  }
  
}


countValues.sort(function(a, b){return a.ct - b.ct});

var finaldata=[];

for(var k=0;k<countValues.length;k++){
  var temp=[];
  temp.push(countValues[k]['ct']);
  temp.push(countValues[k]['at']);
  finaldata.push(temp);
}



Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Pattern Reduction in Generation cost for ' +selectedGenerator+' from  Date '+selectedDate+' to Date '+tdate + ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        title: {

            text: 'Percentage'
        },
        
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [{
        name: 'Reduction in cost',
        data: finaldata,
        color:' #ADD8E6'
    }]
});


//document.getElementById('chart_cumm').innerHTML="<h3>Cumulative Net  :"+cumm.toString()+" (in Lakhs) </h3>";

});




 }else if(selectedPat=="RESERVE1"){




$.post('/gamsdata/getTodayDataDate',{selectedDate:dates,selectedGen:selectedGen},function(res){
  var chartdata=JSON.parse(res);

//   $.post('/genrates/getRampDatesData',{sdate:dates},function(res){

// var rampData=JSON.parse(res);

selectedGenerator=idtoname[selectedGen];
if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}
console.log(chartdata);

var upReserve=[];
var downReserve=[];



for(var i=1;i<chartdata.length;i++){
upReserve.push(parseInt(chartdata[i][5]));
downReserve.push(parseInt(chartdata[i][6]));
}





upReserve.sort(function(a,b){return a-b});
downReserve.sort(function(a,b){return a-b});

console.log('downReserve values');
console.log(downReserve);




var countValues=[];


var countValues1=[];




for(var i=0;i<upReserve.length;i++)
{

  if(upReserve.indexOf(upReserve[i]) == i)
  {
    countValues.push({ct:Number((((upReserve.length-upReserve.indexOf(upReserve[i]))/upReserve.length)*100).toFixed(2)),at:(upReserve[i])});
  }
  
}



for(var i=0;i<downReserve.length;i++)
{

  if(downReserve.indexOf(downReserve[i]) == i)
  {
    countValues1.push({ct:Number((((downReserve.length-downReserve.indexOf(downReserve[i]))/downReserve.length)*100).toFixed(2)),at:(downReserve[i])});
  }
  
}

countValues.sort(function(a, b){return a.ct - b.ct});
countValues1.sort(function(a, b){return a.ct - b.ct});

var finaldata=[];
var finaldata1=[];

for(var k=0;k<countValues.length;k++){
  var temp=[];
  temp.push(countValues[k]['ct']);
  temp.push(countValues[k]['at']);
  finaldata.push(temp);
}

for(var k=0;k<countValues1.length;k++){
  var temp=[];
  temp.push(countValues1[k]['ct']);
  temp.push(countValues1[k]['at']);
  finaldata1.push(temp);
}








Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        }, yAxis: {
       
        title: {

            text: 'MW'
        }
    },
    title: {
        text:' Pattern for Ramping Reserves from  Date '+selectedDate+' to Date '+tdate + ', timeblocks:'  +dates.length*96
    },
    xAxis: {
      title: {

            text: 'Percentage'
        },
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [ {
        name: 'UP Reserve',
        data: finaldata,
        color:' rgba(230,230,0, .1)'
    }]
});





Highcharts.chart('chart_div1', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        }, yAxis: {
       
        title: {

            text: 'MW'
        }
    },
    title: {
        text:' Pattern for Ramping Reserves from  Date '+selectedDate+' to Date '+tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        title: {

            text: 'Percentage'
        },
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [ {
        name: 'Down Reserve',
        data: finaldata1,
        color:' rgba(230,230,0, .1)'
    }]
});













  });

 }else if(selectedPat=="RESERVE2"){




$.post('/gamsdata/getTodayDataDate',{selectedDate:dates,selectedGen:selectedGen},function(res){
  var chartdata=JSON.parse(res);


selectedGenerator=idtoname[selectedGen];
if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}
console.log(chartdata);

var upReserve=[];
var downReserve=[];

for(var i=1;i<chartdata.length;i++)
{
  upReserve.push(chartdata[i][3] - chartdata[i][2]);
  downReserve.push(chartdata[i][2] - chartdata[i][4]);
}

upReserve.sort(function(a,b){return a-b});
downReserve.sort(function(a,b){return a-b});





var countValues=[];
var countValues1=[];




for(var i=0;i<upReserve.length;i++)
{

  if(upReserve.indexOf(upReserve[i]) == i)
  {
    countValues.push({ct:Number((((upReserve.length-upReserve.indexOf(upReserve[i]))/upReserve.length)*100).toFixed(2)),at:(upReserve[i])});
  }
  
}



for(var i=0;i<downReserve.length;i++)
{

  if(downReserve.indexOf(downReserve[i]) == i)
  {
    countValues1.push({ct:Number((((downReserve.length-downReserve.indexOf(downReserve[i]))/downReserve.length)*100).toFixed(2)),at:(downReserve[i])});
  }
  
}

countValues.sort(function(a, b){return a.ct - b.ct});
countValues1.sort(function(a, b){return a.ct - b.ct});

console.log('countValues');
console.log(countValues);
console.log('countValues1');
console.log(countValues1);

var finaldata=[];
var finaldata1=[];

for(var k=0;k<countValues.length;k++){
  var temp=[];
  temp.push(countValues[k]['ct']);
  temp.push(countValues[k]['at']);
  finaldata.push(temp);
}

for(var k=0;k<countValues1.length;k++){
  var temp=[];
  temp.push(countValues1[k]['ct']);
  temp.push(countValues1[k]['at']);
  finaldata1.push(temp);
}




Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        }, yAxis: {
       
        title: {

            text: 'MW'
        }
    },
    title: {
        text:' Pattern for Spinning Reserves from  Date '+selectedDate+' to Date '+tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        title: {

            text: 'Percentage'
        },
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [  {
        name: 'DOWN Reserve',
        data: finaldata1,
        color:' #ADD8E6'
    },{
        name: 'UP Reserve',
        data: finaldata,
        color:' rgba(230,230,0, .1)'
    }]
});



  });




 }
 else if(selectedPat=="OS"){



$.post('/gamsdata/getTodayDataDate',{selectedDate:dates,selectedGen:selectedGen},function(res){
   
var chartdata=JSON.parse(res);
selectedGenerator=idtoname[selectedGen];
if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}
console.log(chartdata);


var sch=[];
var opt=[];
var pmax=[];




for(var i=1;i<chartdata.length;i++)
{
  sch.push(chartdata[i][1]);
  opt.push(chartdata[i][2]);
  pmax.push(chartdata[i][3]);
  
}


sch.sort(function(a,b){return a-b});
opt.sort(function(a,b){return a-b});
pmax.sort(function(a,b){return a-b});

var countValues=[];
var countValues1=[];
var countValues2=[];

for(var i=0;i<sch.length;i++)
{

  if(sch.indexOf(sch[i]) == i)
  {
    countValues.push({ct:Number((((sch.length-sch.indexOf(sch[i]))/sch.length)*100).toFixed(2)),at:(sch[i])});
  }
  
}



for(var i=0;i<opt.length;i++)
{

  if(opt.indexOf(opt[i]) == i)
  {
    countValues1.push({ct:Number((((opt.length-opt.indexOf(opt[i]))/opt.length)*100).toFixed(2)),at:(opt[i])});
  }
  
}




for(var i=0;i<pmax.length;i++)
{

  if(pmax.indexOf(pmax[i]) == i)
  {
    countValues2.push({ct:Number((((pmax.length-pmax.indexOf(pmax[i]))/pmax.length)*100).toFixed(2)),at:(pmax[i])});
  }
  
}


countValues.sort(function(a, b){return a.ct - b.ct});
countValues1.sort(function(a, b){return a.ct - b.ct});
countValues2.sort(function(a, b){return a.ct - b.ct});

console.log('countValues');
console.log(countValues);
console.log('countValues1');
console.log(countValues1); 
console.log('countValues2');
console.log(countValues2);

var finaldata=[];
var finaldata1=[];
var finaldata2=[];

for(var k=0;k<countValues.length;k++){
  var temp=[];
  temp.push(countValues[k]['ct']);
  temp.push(countValues[k]['at']);
  finaldata.push(temp);
}

for(var k=0;k<countValues1.length;k++){
  var temp=[];
  temp.push(countValues1[k]['ct']);
  temp.push(countValues1[k]['at']);
  finaldata1.push(temp);
}


for(var k=0;k<countValues2.length;k++){
  var temp=[];
  temp.push(countValues2[k]['ct']);
  temp.push(countValues2[k]['at']);
  finaldata2.push(temp);
}


finaldata.unshift([0,finaldata[0][1]]);
finaldata1.unshift([0,finaldata1[0][1]]);
finaldata2.unshift([0,finaldata2[0][1]]);

console.log(finaldata);

console.log(finaldata2);








Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Pattern DC, Schedule and Optimal Schedule for ' +selectedGenerator+' From Date '+selectedDate + ' to Date '+tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        title: {

            text: 'Percentage'
        },
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [ {
        name: 'Schedule',
        data: finaldata,
        color:' #ADD8E6'
    }, {
        name: 'Optimal Schedule',
        data: finaldata1,
        color:'#FA8072'
    }

    , {
        name: 'DC',
        data: finaldata2,
        color:'#FA8000'
    } 
    ]
});



      });







 }  else if(selectedPat=="PMINDUAL" || selectedPat=="PMAXDUAL" || selectedPat =="RAMPUPDUAL" || selectedPat=="RAMPDNDUAL"){



$.post('/gamsdual/getDualTrend',{selectedDate:dates,selectedGen:selectedGen},function(res){
   
var chartdata=JSON.parse(res);
console.log("dual analysis",chartdata)
selectedGenerator=idtoname[selectedGen];
if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}
console.log(chartdata);


//var sch=[];
var opt=[];

let mapdual= {"PMINDUAL":4,"PMAXDUAL":3,"RAMPDNDUAL":2,"RAMPUPDUAL":1}


for(var i=1;i<chartdata.length;i++)
{
  //sch.push(chartdata[i][1]);
  opt.push(chartdata[i][mapdual[selectedPat]]);
}


//sch.sort(function(a,b){return a-b});
opt.sort(function(a,b){return a-b});

var countValues=[];
var countValues1=[];


// for(var i=0;i<sch.length;i++)
// {

//   if(sch.indexOf(sch[i]) == i)
//   {
//     countValues.push({ct:Number((((sch.length-sch.indexOf(sch[i]))/sch.length)*100).toFixed(2)),at:(sch[i])});
//   }
  
// }



for(var i=0;i<opt.length;i++)
{

  if(opt.indexOf(opt[i]) == i)
  {
    countValues1.push({ct:Number((((opt.length-opt.indexOf(opt[i]))/opt.length)*100).toFixed(2)),at:(opt[i])});
  }
  
}

//countValues.sort(function(a, b){return a.ct - b.ct});
countValues1.sort(function(a, b){return a.ct - b.ct});

// console.log('countValues');
// console.log(countValues);
// console.log('countValues1');
// console.log(countValues1); 

//var finaldata=[];
var finaldata1=[];

// for(var k=0;k<countValues.length;k++){
//   var temp=[];
//   temp.push(countValues[k]['ct']);
//   temp.push(countValues[k]['at']);
//   finaldata.push(temp);
// }

for(var k=0;k<countValues1.length;k++){
  var temp=[];
  temp.push(countValues1[k]['ct']);
  temp.push(countValues1[k]['at']);
  finaldata1.push(temp);
}


//finaldata.unshift([0,finaldata[0][1]]);
finaldata1.unshift([0,finaldata1[0][1]]);

//console.log(finaldata);









Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Pattern Dual for ' +selectedGenerator+' From Date '+selectedDate + ' to Date '+tdate + ', timeblocks:'  +dates.length*96
    },
    xAxis: {
        title: {

            text: 'Percentage'
        },
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [  {
        name: selectedPat,
        data: finaldata1,
        color:'#FA8072'
    }]
});



      });







 }else if(selectedPat=="ACTUAL"){



$.post('/gamsactual/getTodayDataDateActual',{selectedDate:dates,selectedGen:selectedGen},function(res){
   
var chartdata=JSON.parse(res);
selectedGenerator=idtoname[selectedGen];
if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}
console.log(chartdata);


//var sch=[];
var opt=[];




for(var i=1;i<chartdata.length;i++)
{
  //sch.push(chartdata[i][1]);
  opt.push(chartdata[i][2]);
}


//sch.sort(function(a,b){return a-b});
opt.sort(function(a,b){return a-b});

var countValues=[];
var countValues1=[];


// for(var i=0;i<sch.length;i++)
// {

//   if(sch.indexOf(sch[i]) == i)
//   {
//     countValues.push({ct:Number((((sch.length-sch.indexOf(sch[i]))/sch.length)*100).toFixed(2)),at:(sch[i])});
//   }
  
// }



for(var i=0;i<opt.length;i++)
{

  if(opt.indexOf(opt[i]) == i)
  {
    countValues1.push({ct:Number((((opt.length-opt.indexOf(opt[i]))/opt.length)*100).toFixed(2)),at:(opt[i])});
  }
  
}

//countValues.sort(function(a, b){return a.ct - b.ct});
countValues1.sort(function(a, b){return a.ct - b.ct});

// console.log('countValues');
// console.log(countValues);
// console.log('countValues1');
// console.log(countValues1); 

//var finaldata=[];
var finaldata1=[];

// for(var k=0;k<countValues.length;k++){
//   var temp=[];
//   temp.push(countValues[k]['ct']);
//   temp.push(countValues[k]['at']);
//   finaldata.push(temp);
// }

for(var k=0;k<countValues1.length;k++){
  var temp=[];
  temp.push(countValues1[k]['ct']);
  temp.push(countValues1[k]['at']);
  finaldata1.push(temp);
}


//finaldata.unshift([0,finaldata[0][1]]);
finaldata1.unshift([0,finaldata1[0][1]]);

//console.log(finaldata);









Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Actual Meter Reading for ' +selectedGenerator+' From Date '+selectedDate + ' to Date '+tdate+ ', timeblocks:'  +dates.length*96
    },
    xAxis: {

      title: {

            text: 'Percentage'
        },
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [  {
        name: 'SEM',
        data: finaldata1,
        color:'#FA8072'
    }]
});



      });






 }

 else if(selectedPat=="pocloss"){





$.post('/gamsdata/getTodayDataDateLoss',{selectedDate:dates,selectedGen:selectedGen},function(res){
   selectedGenerator=idtoname[selectedGen];
   if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}
chartdata=JSON.parse(res);
console.log(chartdata);
var finaldata=[];

var xaxis=[];
var yaxis=[];


for(var i=1;i<chartdata.length;i++){
xaxis.push(((i-1)%96 + 1).toString());
yaxis.push(parseInt((chartdata[i][2]-chartdata[i][1])));

}


yaxis.sort(function(a,b){return a-b});

var countValues=[];

for(var i=0;i<yaxis.length;i++)
{

  if(yaxis.indexOf(yaxis[i]) == i)
  {
    countValues.push({ct:Number((((yaxis.length-yaxis.indexOf(yaxis[i]))/yaxis.length)*100).toFixed(2)),at:yaxis[i]});
  }
  
}





countValues.sort(function(a, b){return a.ct - b.ct});

var finaldata=[];

for(var k=0;k<countValues.length;k++){
  var temp=[];
  temp.push(countValues[k]['ct']);
  temp.push(countValues[k]['at']);
  finaldata.push(temp);
}







Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy',
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        }, yAxis: {
       
        title: {
            text: 'MW'
        }
    },
     xAxis: {
       
        title: {
            text: 'Percentage'
        }
    },


    title: {
        text: ' Loss For '+selectedGenerator+' From '+selectedDate + ' To ' + tdate + ', timeblocks:'  +dates.length*96
    },
    credits: {
        enabled: false
    },
    series: [ {
        name: 'Loss in (MW)',
        data: finaldata,
        //color:' rgba(230,230,0, .1)'
    }]
});



});







/*

$.post('/gamsdata/getTodaySaving',{selectedDate:dates,selectedGen:selectedGen,flag:2},function(res){
   
var chartdata=JSON.parse(res);
selectedGenerator=idtoname[selectedGen];

//console.log(chartdata);
if(typeof(selectedGenerator)=="undefined"){
  selectedGenerator=selectedGen;
}


var ocost=[];
var pcost=[];


console.log(chartdata);

var days=dates.length;

for(var i=1;i<chartdata.length;i++)
{
  ocost.push(chartdata[i][1]);
  pcost.push(chartdata[i][2]);
}




ocost.sort(function(a,b){return a-b});
pcost.sort(function(a,b){return a-b});

console.log("ocost printing");
console.log(ocost);


var countValues=[];
var countValues2=[];




for(var i=0;i<ocost.length;i++)
{

  if(ocost.indexOf(ocost[i]) == i)
  {
    countValues.push({ct:Number((((ocost.length-ocost.indexOf(ocost[i]))/ocost.length)*100).toFixed(2)),at:ocost[i]});
  }
  
}


for(var i=0;i<pcost.length;i++)
{

  if(pcost.indexOf(pcost[i]) == i)
  {
    countValues2.push({ct:Number((((pcost.length-pcost.indexOf(pcost[i]))/pcost.length)*100).toFixed(2)),at:pcost[i]});
  }
  
}

  


countValues.sort(function(a, b){return a.ct - b.ct});
countValues2.sort(function(a, b){return a.ct - b.ct});

var finaldata=[];
var finaldata2=[];

for(var k=0;k<countValues.length;k++){
  var temp=[];
  temp.push(countValues[k]['ct']);
  temp.push(countValues[k]['at']);
  finaldata.push(temp);
}


for(var k=0;k<countValues2.length;k++){
  var temp=[];
  temp.push(countValues2[k]['ct']);
  temp.push(countValues2[k]['at']);
  finaldata2.push(temp);
}
console.log('countValues');
console.log(countValues);
console.log('countValues2');
console.log(countValues2);










Highcharts.chart('chart_div', {

    chart: {
        type: 'area'
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        },
    title: {
        text:'Pattern for  Optimal Cost and Present Cost for ' +selectedGenerator+' From Date '+selectedDate+' to Date '+tdate
    },
    xAxis: {
            labels: {
            fontSize:'25px',
            style: {
                color:'#000000'
            }
        }
    },
    
    credits: {
        enabled: false
    },
    series: [ {
        name: 'Optimal Cost',
        data: finaldata,
        color:'#FA8072'
    },

    {
      name:'Present Cost',
      data: finaldata2,
    }]
});



   
      });


*/




 }

else if(selectedPat=="PERTURBATIONS"){

    $.post('/gamspwc/getChanges',{date:dates},function(res){
   
chartdata=JSON.parse(res);

console.log("printing chart data");

console.log(chartdata);
var xaxisData=[];
var sch=[];
var opt=[];
var pmin=[];
var pmax=[];

for(var i=0;i<chartdata.length;i++){
  xaxisData.push((i%96) +1);

  sch.push(parseInt(chartdata[i][1]));

   opt.push(parseInt(chartdata[i][2]));

    pmax.push(parseInt(chartdata[i][3]));

     pmin.push(parseInt(-1*chartdata[i][4]));
}



sch.sort(function(a,b){return a-b});
opt.sort(function(a,b){return a-b});
pmax.sort(function(a,b){return a-b});
pmin.sort(function(a,b){return a-b});

var countValuessch=[];
var countValuesopt=[];
var countValuespmax=[];
var countValuespmin=[];

console.log('pmax after sorting');
console.log(pmax);

console.log('pmin after sorting');
console.log(pmin);

for(var i=0;i<sch.length;i++)
{

  if(sch.indexOf(sch[i]) == i)
  {
    countValuessch.push({ct:Number((((sch.length-sch.indexOf(sch[i]))/sch.length)*100).toFixed(2)),at:sch[i]});
  }
  


  if(opt.indexOf(opt[i]) == i)
  {
    countValuesopt.push({ct:Number((((opt.length-opt.indexOf(opt[i]))/opt.length)*100).toFixed(2)),at:opt[i]});
  }
  



  if(pmax.indexOf(pmax[i]) == i)
  {
    countValuespmax.push({ct:Number((((pmax.length-pmax.indexOf(pmax[i]))/pmax.length)*100).toFixed(2)),at:pmax[i]});
  }
  




  if(pmin.indexOf(pmin[i]) == i)
  {
    countValuespmin.push({ct:Number((((pmin.length-pmin.indexOf(pmin[i]))/pmin.length)*100).toFixed(2)),at:pmin[i]});
  }
  
}





countValuessch.sort(function(a, b){return a.ct - b.ct});
countValuesopt.sort(function(a, b){return a.ct - b.ct});
countValuespmax.sort(function(a, b){return a.ct - b.ct});
countValuespmin.sort(function(a, b){return a.ct - b.ct});




console.log('printing countValuespmax');
console.log(countValuespmax);




var finaldatasch=[];
var finaldataopt=[];
var finaldatapmax=[];
var finaldatapmin=[];

for(var k=0;k<countValuessch.length;k++){
  var temp=[];
  temp.push(countValuessch[k]['ct']);
  temp.push(countValuessch[k]['at']);
  finaldatasch.push(temp);
}


for(var k=0;k<countValuesopt.length;k++){

  var temp2=[];
  temp2.push(countValuesopt[k]['ct']);
  temp2.push(countValuesopt[k]['at']);
  finaldataopt.push(temp2);
}


for(var k=0;k<countValuespmax.length;k++){

  var temp3=[];
  temp3.push(countValuespmax[k]['ct']);
  temp3.push(countValuespmax[k]['at']);
  finaldatapmax.push(temp3);
}

for(var k=0;k<countValuespmin.length;k++){

  var temp4=[];
  temp4.push(countValuespmin[k]['ct']);
  temp4.push(countValuespmin[k]['at']);
  finaldatapmin.push(temp4);

}






Highcharts.chart('chart_div', {

    chart: {
        type: 'area',
        zoomType: 'xy',
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        }, yAxis: {
       
        title: {
            text: 'Values'
        }
    },

    xAxis: {
       
        title: {
            text: 'Percentage'
        }
    },

    title: {
        text: 'SCED UP COUNT for '+selectedGenerator+' From '+selectedDate + ' To ' + tdate+ ', timeblocks:'  +dates.length*96
    },
    credits: {
        enabled: false
    },
    series: [ {
        name: 'SCED UP COUNT',
        data: finaldatasch,
        //color:' rgba(230,230,0, .1)'
    }]
});





Highcharts.chart('chart_div1', {

    chart: {
        type: 'area',
        zoomType: 'xy',
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        }, yAxis: {
       
        title: {
            text: 'Values'
        }
    },
    xAxis: {
       
        title: {
            text: 'Percentage'
        }
    },

    title: {
        text: 'SCED DOWN COUNT for '+selectedGenerator+' From '+selectedDate + ' To ' + tdate + ', timeblocks:'  +dates.length*96
    },
    credits: {
        enabled: false
    },
    series: [ {
        name: 'SCED DOWN COUNT',
        data: finaldataopt,
        //color:' rgba(230,230,0, .1)'
    }]
});





Highcharts.chart('chart_div2', {

    chart: {
        type: 'area',
        zoomType: 'xy',
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        }, yAxis: {
       
        title: {
            text: 'Values'
        }
    },

    xAxis: {
       
        title: {
            text: 'Percentage'
        }
    },

    title: {
        text: 'SCED UP (in MW) for '+selectedGenerator+' From '+selectedDate + ' To ' + tdate + ', timeblocks:'  +dates.length*96
    },
    credits: {
        enabled: false
    },
    series: [ {
        name: 'SCED UP (in MW)',
        data: finaldatapmax,
        //color:' rgba(230,230,0, .1)'
    }]
});





Highcharts.chart('chart_div3', {

    chart: {
        type: 'area',
        zoomType: 'xy',
    }, legend: {
              itemStyle: {
                 fontSize: '20px',
                 color: '#000000'
              }

        }, yAxis: {
       
        title: {
            text: 'Values'
        }
    },

    xAxis: {
       
        title: {
            text: 'Percentage'
        }
    },

    title: {
        text: 'SCED DOWN (in MW) for '+selectedGenerator+' From '+selectedDate + ' To ' + tdate + ', timeblocks:'  +dates.length*96
    },
    credits: {
        enabled: false
    },
    series: [ {
        name: 'SCED DOWN (in MW)',
        data: finaldatapmin,
        //color:' rgba(230,230,0, .1)'
    }]
});












      });



 }




}



</script>
<div class="row"><span class="alert alert-danger col-lg-12"><h5><center>Kindly Select Date Range Excluding Today Date</center></h5></span></div>
<div class="row">

               <div class="col-lg-2">
    <label for="calender1">FROM DATE</label>
     <input type="text" class="form-control"   id="calender1">
</div>

               <div class="col-lg-2">
    <label for="calender2">TO DATE</label>
     <input type="text" class="form-control"   id="calender2">
</div>
        <div class="col-lg-3">
          <label>PATTERN TO PLOT</label>
          <select id="dropdownpattern" class="form-control"></select>
        </div>

      <div class="col-lg-3">
          <label>GENERATORS</label>
          <select id="dropdowngen" class="form-control"></select>
      </div>

<div class="col-lg-2">
  <label>submit</label>
  <button class="btn btn-outline-primary form-control" onclick="showPattern()" >submit</button>
</div>
</div>
<div id="chart_div" style="width: 100%; height: 500px;"></div>
<div id="chart_cumm" class="col-lg-8 offset-lg-2"></div>
<div id="chart_div1" style="width: 100%; height: 500px;"></div>
<div id="chart_div2" style="width: 100%; height: 500px;"></div> 
<div id="chart_div3" style="width: 100%; height: 500px;"></div>